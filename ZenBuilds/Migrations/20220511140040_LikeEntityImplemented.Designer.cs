// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZenBuilds.Helpers;

#nullable disable

namespace ZenBuilds.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220511140040_LikeEntityImplemented")]
    partial class LikeEntityImplemented
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ZenBuilds.Entities.Build", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<int>("OpponentRace")
                        .HasColumnType("int");

                    b.Property<int>("PlayerRace")
                        .HasColumnType("int");

                    b.Property<DateTime>("Published")
                        .HasColumnType("SmallDateTime ");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "Id");

                    b.ToTable("Builds");
                });

            modelBuilder.Entity("ZenBuilds.Entities.Follower", b =>
                {
                    b.Property<int>("User_UserId")
                        .HasColumnType("int");

                    b.Property<int>("Follower_UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FollowDate")
                        .HasColumnType("SmallDateTime ");

                    b.HasKey("User_UserId", "Follower_UserId");

                    b.HasIndex("Follower_UserId");

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("ZenBuilds.Entities.Like", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BuildId")
                        .HasColumnType("int");

                    b.Property<int>("BuildId1")
                        .HasColumnType("int");

                    b.Property<int>("BuildUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LikeDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BuildId");

                    b.HasIndex("BuildUserId", "BuildId1");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ZenBuilds.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("SmallDateTime ");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZenPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ZenBuilds.Entities.UserLog", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AuthSuccessful")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("SmallDateTime ");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "Id");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("ZenBuilds.Entities.Build", b =>
                {
                    b.HasOne("ZenBuilds.Entities.User", "User")
                        .WithMany("Builds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenBuilds.Entities.Follower", b =>
                {
                    b.HasOne("ZenBuilds.Entities.User", "Follower_User")
                        .WithMany("Followers")
                        .HasForeignKey("Follower_UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ZenBuilds.Entities.User", "User_User")
                        .WithMany("Following")
                        .HasForeignKey("User_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follower_User");

                    b.Navigation("User_User");
                });

            modelBuilder.Entity("ZenBuilds.Entities.Like", b =>
                {
                    b.HasOne("ZenBuilds.Entities.User", "User")
                        .WithMany("LikedBuilds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZenBuilds.Entities.Build", "Build")
                        .WithMany("Likes")
                        .HasForeignKey("BuildUserId", "BuildId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Build");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenBuilds.Entities.UserLog", b =>
                {
                    b.HasOne("ZenBuilds.Entities.User", "User")
                        .WithMany("UserLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenBuilds.Entities.Build", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ZenBuilds.Entities.User", b =>
                {
                    b.Navigation("Builds");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("LikedBuilds");

                    b.Navigation("UserLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
